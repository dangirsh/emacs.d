# Common config file

* Basic config

** Identity

Set up my identity

#+begin_src emacs-lisp
(setq user-full-name "Pierre Lecocq"
      user-mail-address "pierre.lecocq@gmail.com")
#+end_src

** Yes or no

Who is not lazy ?

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** No backup files

Fuck you, backup files

#+begin_src emacs-lisp
(setq make-backup-files nil
      backup-inhibited t
      auto-save-default nil)
#+end_src

** Kill whole line

#+begin_src emacs-lisp
(setq kill-whole-line t)
#+end_src

** Disable VC mode

Speed up boot

#+begin_src emacs-lisp
(eval-after-load "vc"
  '(remove-hook 'find-file-hooks 'vc-find-file-hook))
#+end_src

** Set locales

#+begin_src emacs-lisp
(set-language-environment 'utf-8)
(set-terminal-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

* Indentation

** Basics

#+begin_src emacs-lisp
(setq-default tab-width 4
              c-basic-offset 4
              c-hanging-comment-ender-p nil
              indent-tabs-mode nil)

(c-add-style
 "custom-four-indent"
 '((c-offsets-alist
    (arglist-close . 0)
    (arglist-intro . 4)
    (case-label . 4))))

(add-hook 'find-file-hook '(lambda ()
  (if (and buffer-file-name
           (string-match "/gnulib\\>" (buffer-file-name))
           (not (string-equal mode-name "Change Log"))
           (not (string-equal mode-name "Makefile")))
      (setq indent-tabs-mode nil))))
#+end_src

** Custom indentation for PHP mode

#+begin_src emacs-lisp
(add-hook 'php-mode-hook
          '(lambda ()
             (setq comment-start "// ")
             (setq comment-end "")
             (set (make-local-variable 'indent-tabs-mode) nil)
             (c-set-style "custom-four-indent")))
#+end_src

** Custom indentation for Ruby mode

#+begin_src emacs-lisp
(setq ruby-deep-indent-paren nil)
#+end_src

** Indent the whole file

#+begin_src emacs-lisp
(defun pl/indent-all ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))
#+end_src

* File modes

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . rhtml-mode))
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
#+end_src

* Look and feel

** Startup buffer

#+begin_src emacs-lisp
(setq inhibit-startup-message t
      initial-scratch-message (format "* Perkeleen Vittupää (%s)\n" (substring (emacs-version) 10 16))
      frame-title-format "%f @emacs")
#+end_src

** Remove menu, toolbar and scrollbar

Remove useless UI

#+begin_src emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

** Whitespaces and new lines

Remove useless whitespaces and add a new line at the end of the file

#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
(setq-default highlight-tabs t)
(setq require-final-newline t)
(setq next-line-add-newlines nil)
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
#+end_src

** Basic modes

Load indispensable modes

#+begin_src emacs-lisp
(show-paren-mode t)
(global-font-lock-mode t)
(transient-mark-mode t)
(line-number-mode t)
(column-number-mode t)
#+end_src

** Transparency

Set up frame transparency

#+begin_src emacs-lisp
(defun pl/transparency (value)
  "Sets the transparency of the frame window. 0 = transparent / 100 = opaque"
  (interactive "nTransparency Value 0 - 100 opaque: ")
  (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

** Color theme switcher

Switch between color themes

#+begin_src emacs-lisp
(setq pl/available-themes '(
                            color-theme-dark-laptop
                            color-theme-deep-blue
                            color-theme-standard))

(defun pl/theme-switch()
  "Switch between themes"
  (interactive)
  (setq pl/next-theme (pop pl/available-themes))
  (setq pl/available-themes (append pl/available-themes (list pl/next-theme)))
  (message "Switch to theme %s" pl/next-theme)
  (funcall pl/next-theme)
)
#+end_src

** X mode

Only if X is detected

#+begin_src emacs-lisp
(defun pl/x-mode()
  (global-hl-line-mode t)
  (color-theme-dark-laptop)
  ;; (pl/theme-switch)
  ;; (pl/transparency 85)
  ;; (global-linum-mode t)
  (set-fringe-mode '(5 . 5)))

(if window-system (pl/x-mode))
#+end_src

* Shell

If shell has not been launched, launch it. If it was, simply switch to its buffer

#+begin_src emacs-lisp
(defun pl/get-shell()
  (interactive)
  (if (eq nil (get-buffer "*shell*"))
      (shell)
    (switch-to-buffer "*shell*")))
#+end_src

* Tags

Find files through TAGs

#+begin_src emacs-lisp
(defun ido-find-file-in-tag-files ()
  (interactive)
  (save-excursion
    (let ((enable-recursive-minibuffers t))
      (visit-tags-table-buffer))
    (find-file
     (expand-file-name
      (ido-completing-read
       "Project file: " (tags-table-files) nil t)))))
#+end_src

* Buffers

Kill all buffers but initial ones
#+begin_src emacs-lisp
(defun pl/clean-buffers ()
  (interactive)
  (setq whitelist '("*scratch*" "*Messages*" "*Group*" "*eshell*"))
  (mapcar (lambda (the-buffer)
            (unless (member (buffer-name the-buffer) whitelist)
              (kill-buffer (buffer-name the-buffer)))) (buffer-list)))
#+end_src

* Occur at point

Find occurrences of symbol at point

#+begin_src emacs-lisp
(defun pl/occur-at-point()
  (interactive)
  (setq thing (thing-at-point 'symbol))
  (unless thing
    (setq thing (read-from-minibuffer "Pattern: ")))
  (occur thing))
#+end_src

* Go to documentation

To be continued and must add other documentation urls

#+begin_src emacs-lisp
(defun pl/go-to-doc()
  (interactive)

  (setq search-url "")
  (setq search-term (thing-at-point 'symbol))
  (setq current-major-mode (format "%s" major-mode))

  (unless search-term
    (setq search-term (read-from-minibuffer "Term to search in documentation: ")))

  (cond
   ;; Ruby
   ((equal current-major-mode "ruby-mode")
    (setq search-url "http://apidock.com/ruby/search?commit=Search&query="))
   ;; Python
   ((equal current-major-mode "python-mode")
    (setq search-url "https://docs.python.org/3/search.html?q="))
   ;; PHP
   ((equal current-major-mode "php-mode")
    (setq search-url "http://php.net/manual-lookup.php?pattern="))
   )

  (if (equal "" search-url)
      (error "Unknown search-url for major mode %s" current-major-mode)
    (browse-url (concat search-url search-term))))
#+end_src

* Modeline

#+begin_src emacs-lisp
(which-func-mode)

(setq-default
 mode-line-format
 (list
  '(:eval (if (buffer-modified-p)
      (propertize "  %b" 'face 'bold-italic)
    (propertize "  %b" 'face 'bold)))
  " (%l:%c)"
  " %p/%I -"
  '(which-func-mode (" " which-func-format " -"))
  " %m";; (format " %s" minor-mode-alist)
  ))
#+end_src
