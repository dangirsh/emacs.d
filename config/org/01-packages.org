# Packages config file

* Set up packages

Define the package manager of choice. "package.el" and "el-get" are supported.

#+begin_src emacs-lisp
(setq pmoc "el-get")
#+end_src

Define the wanted packages

#+begin_src emacs-lisp
(setq
 wanted-packages
 '(
   autopair
   company-mode
   darkmine-theme
   elfeed
   emms
   erc
   flycheck
   gnus-desktop-notify
   htmlize
   idle-highlight-mode
   ido-hacks
   ido-vertical-mode
   js2-mode
   magit
   markdown-mode
   multiple-cursors
   php-mode
   rainbow-mode
   ruby-mode
   twittering-mode
   visual-regexp
   web-mode
   yaml-mode
))
#+end_src

Define the function that will handle packages

#+begin_src emacs-lisp
(defun install-wanted-packages ()
  "Install wanted packages according to a specific package manager"
  (interactive)
  (cond
   ;; package.el
   ((string= pmoc "package.el")
    (require 'package)
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
    (add-to-list 'package-archives '("marmelade" . "http://marmalade-repo.org/packages/"))
    (package-initialize)
    (let ((need-refresh nil))
      (mapc (lambda (package-name)
          (unless (package-installed-p package-name)
        (set 'need-refresh t))) wanted-packages)
      (if need-refresh
        (package-refresh-contents)))
    (mapc (lambda (package-name)
        (unless (package-installed-p package-name)
          (package-install package-name))) wanted-packages)
    )
   ;; el-get
   ((string= pmoc "el-get")
    (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
    (unless (require 'el-get nil 'noerror)
      (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (let (el-get-master-branch)
      (goto-char (point-max))
      (eval-print-last-sexp))))
    (el-get 'sync wanted-packages))
   ;; fallback
   (t (error "Unsupported package manager")))
  )
#+end_src

And call it !

#+begin_src emacs-lisp
(install-wanted-packages)
#+end_src
