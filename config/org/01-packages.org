* Packages

** Setup

Set up the package manager and its sources

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "http://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))
(package-initialize)
#+end_src

Install John Wiegley's =use-package= package

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (progn
    (package-refresh-contents)
    (package-install 'use-package)))

(require 'use-package)
#+end_src

** Install and configure

*Anzu* - Displays current match and total matches information in the mode-line in various search modes

#+begin_src emacs-lisp
(use-package anzu
         :ensure anzu
         :init (progn
                 (global-anzu-mode +1)
                 (set-face-attribute 'anzu-mode-line nil :foreground "yellow" :weight 'bold)))
#+end_src

*Autopair* - Automagically pair braces and quotes

#+begin_src emacs-lisp
(use-package autopair
         :ensure autopair
         :init (progn
             (autopair-global-mode t)))
#+end_src

*BBDB* - The Insidious Big Brother Database for GNU Emacs

#+begin_src emacs-lisp
(use-package bbdb
         :ensure bbdb)
#+end_src

*Browse-kill-ring* - For when 'C-y M-y M-y M-y' gets you down

#+begin_src emacs-lisp
(use-package browse-kill-ring
         :ensure browse-kill-ring
         :init (progn
                 (global-set-key "\M-y" 'browse-kill-ring)))
#+end_src

*Company* - Modular text completion framework

#+begin_src emacs-lisp
(use-package company
         :ensure company
         :init (progn
             (add-hook 'after-init-hook 'global-company-mode)
             (setq company-auto-complete nil)
             (global-company-mode 1)
             (add-to-list 'company-backends 'company-dabbrev t)
             (add-to-list 'company-backends 'company-ispell t)
             (add-to-list 'company-backends 'company-files t)))
#+end_src

*Darkmine-theme* - Yet another emacs dark color theme

#+begin_src emacs-lisp
(use-package darkmine-theme
         :ensure darkmine-theme)
#+end_src

*Flycheck* - Modern on-the-fly syntax checking for GNU Emacs

#+begin_src emacs-lisp
(use-package flycheck
         :ensure flycheck)
#+end_src

*Gnus Desktop Notify* - Gnus Desktop Notification global minor mode

#+begin_src emacs-lisp
(use-package gnus-desktop-notify
         :ensure gnus-desktop-notify)
#+end_src

*HTMLize* - Convert buffer text and decorations to HTML

#+begin_src emacs-lisp
(use-package htmlize
         :ensure htmlize)
#+end_src

*Idle Highlight Mode* - Highlight the word the point is on

#+begin_src emacs-lisp
(use-package idle-highlight-mode
         :ensure idle-highlight-mode
         :init (progn
             (add-hook 'c-mode-hook (lambda () (idle-highlight-mode t)))
             (add-hook 'emacs-lisp-mode-hook (lambda () (idle-highlight-mode t)))
             (add-hook 'ruby-mode-hook (lambda () (idle-highlight-mode t)))
             (add-hook 'js2-mode-hook (lambda () (idle-highlight-mode t)))
             (add-hook 'php-mode-hook (lambda () (idle-highlight-mode t)))))
#+end_src

*Ido mode* - Interactively do things with buffers and files

#+begin_src emacs-lisp
(use-package ido
             :init (progn
             (require 'ido)
             (ido-mode t)
             (ido-everywhere 1)
             (setq ido-enable-flex-matching t)
                     (add-hook 'ido-setup-hook (lambda () (define-key ido-completion-map [tab] 'ido-complete)))))
#+end_src

*Ido hacks* - Put more IDO in your IDO

#+begin_src emacs-lisp
(use-package ido-hacks
         :ensure ido-hacks
             :init (progn
             (ido-hacks-mode)))
#+end_src

*Ido vertical mode* - Makes ido-mode display prospects vertically

#+begin_src emacs-lisp
(use-package ido-vertical-mode
         :ensure ido-vertical-mode
         :init (progn
             (ido-vertical-mode)))
#+end_src

*Indent guide* - Show vertical lines to guide indentation

#+begin_src emacs-lisp
(use-package indent-guide
         :ensure indent-guide
         :init (progn
                 (indent-guide-global-mode)))
#+end_src

*JS2 mode* - Improved JavaScript editing mode

#+begin_src emacs-lisp
(use-package js2-mode
         :ensure js2-mode)
#+end_src

*Markdown mode* - Emacs Major mode for Markdown-formatted text files

#+begin_src emacs-lisp
(use-package markdown-mode
         :ensure markdown-mode)
#+end_src

*PHP extras* - Extra features for Emacs php-mode.

#+begin_src emacs-lisp
(use-package php-extras
         :ensure php-extras
         :init (progn
           (add-hook 'php-mode-hook (lambda () (require 'php-extras)))))
#+end_src

*PHP mode* - Major mode for editing PHP code

#+begin_src emacs-lisp
(use-package php-mode
         :ensure php-mode)
#+end_src

*Rainbow mode* - Minor mode which displays strings representing colors with the color they represent

#+begin_src emacs-lisp

(use-package rainbow-mode
         :ensure rainbow-mode
         :init (progn
             (add-hook 'css-mode-hook (lambda () (rainbow-mode 1)))))
#+end_src

*Recentf* - Minor mode that builds a list of recently opened files

#+begin_src emacs-lisp
(use-package recentf
         :init (progn
             (recentf-mode 1)
             (setq recentf-max-menu-items 25)))
#+end_src

*Robe mode* - Code navigation, documentation lookup and completion for Ruby

#+begin_src emacs-lisp
(use-package robe
         :ensure robe
         :init (progn
             (add-hook 'ruby-mode-hook 'robe-mode)
             (push 'company-robe company-backends)))
#+end_src

*Ruby mode* - Major mode for editing Ruby code

#+begin_src emacs-lisp
(use-package ruby-mode
         :ensure ruby-mode)
#+end_src

*SLIME* - Superior Lisp Interaction Mode for Emacs

#+begin_src emacs-lisp
(use-package slime
         :ensure slime
             :init (progn
                     (setq inferior-lisp-program "sbcl")))
#+end_src

*Show marks* - Navigate and visualize the mark-ring

#+begin_src emacs-lisp
(use-package show-marks
         :ensure show-marks
             :init (progn
                      (global-set-key (kbd "C-M-m n") 'forward-mark)
                      (global-set-key (kbd "C-M-m p") 'backward-mark)
                      (global-set-key (kbd "C-M-m s") 'show-marks)))
#+end_src

*Symon* - Tiny graphical system monitor

#+begin_src emacs-lisp
(use-package symon
         :ensure symon
         :init (progn
                 (symon-mode t)))
#+end_src

*Uniquify* - Making buffer names unique

#+begin_src emacs-lisp
(use-package uniquify
         :init (progn
                     (setq uniquify-buffer-name-style 'forward uniquify-separator "/")))
#+end_src

*Visual regexp* - A regexp/replace command for Emacs with interactive visual feedback

#+begin_src emacs-lisp
(use-package visual-regexp
         :ensure visual-regexp)
#+end_src

*Web mode* - Major mode for editing html templates

#+begin_src emacs-lisp
(use-package web-mode
         :ensure web-mode)
#+end_src

*YAML mode* - Major mode for editing YAML files

#+begin_src emacs-lisp
(use-package yaml-mode
         :ensure yaml-mode)
#+end_src
