* Common configurations

** Generic configuration

Set my identity

#+begin_src emacs-lisp
(setq user-full-name "Pierre Lecocq"
      user-mail-address "pierre.lecocq@gmail.com")
#+end_src

Set locales

#+begin_src emacs-lisp
(set-language-environment 'utf-8)
(set-terminal-coding-system 'utf-8)
(setq locale-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

;; Because fuck you, PHP
(add-hook 'find-file-hook '(lambda ()
  (when (string= major-mode "php-mode")
    (progn
      (set-language-environment 'latin-1)
      (set-terminal-coding-system 'latin-1)
      (setq locale-coding-system 'latin-1)
      (set-default-coding-systems 'latin-1)
      (set-selection-coding-system 'latin-1)
      (prefer-coding-system 'latin-1)))))
#+end_src

Set indentation rules

#+begin_src emacs-lisp
(unless (string= major-mode "GNUmakefile")
  (setq-default tab-width 4
                c-basic-offset 4
                c-hanging-comment-ender-p nil
                indent-tabs-mode nil)

  (c-add-style
   "custom-four-indent"
   '((c-offsets-alist
      (arglist-close . 0)
      (arglist-intro . 4)
      (case-label . 4))))

  (add-hook 'find-file-hook '(lambda ()
                               (if (and buffer-file-name
                                        (string-match "/gnulib\\>" (buffer-file-name))
                                        (not (string-equal mode-name "Change Log"))
                                        (not (string-equal mode-name "Makefile")))
                                   (setq indent-tabs-mode nil))))
  )

;; Ruby specific rules
(setq ruby-deep-indent-paren nil)

;; PHP specific rules
(add-hook 'php-mode-hook
          '(lambda ()
             (setq comment-start "// ")
             (setq comment-end "")
             (set (make-local-variable 'indent-tabs-mode) nil)
             (c-set-style "custom-four-indent")))

#+end_src


Remove useless whitespaces and add a new line at the end of the file

#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
(setq-default highlight-tabs t)
(setq require-final-newline t)
(setq next-line-add-newlines nil)
(add-hook 'before-save-hook 'whitespace-cleanup)
(add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
#+end_src

Load indispensable modes

#+begin_src emacs-lisp
(show-paren-mode t)
(global-font-lock-mode t)
(transient-mark-mode t)
(line-number-mode t)
(column-number-mode t)
(global-auto-revert-mode 1)
#+end_src

Laziness...

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Rgrep exclude directories

#+begin_src emacs-lisp
(eval-after-load 'grep
  '(progn
     (add-to-list 'grep-find-ignored-directories "build")
     (add-to-list 'grep-find-ignored-directories "elpa")))
(add-hook 'grep-mode-hook (lambda () (toggle-truncate-lines 1)))
#+end_src

And some other common configurations

#+begin_src emacs-lisp
(setq
      ;; No backups
      make-backup-files nil
      backup-inhibited t
      auto-save-default nil
      ;; Startup buffer
      inhibit-startup-message t
      inhibit-splash-screen t
      initial-scratch-message ";; Scratch buffer\n\n(setq debug-on-error t)\n\n"
      ;; Frame title
      frame-title-format "Emacs %f"
      ;; Kill the whole line
      kill-whole-line t
      ;; Special files localtions
      bookmark-default-file (concat user-emacs-directory "bookmarks"))
#+end_src

** File modes

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '(".bashrc" . shell-script-mode))
(add-to-list 'auto-mode-alist '(".zshrc" . shell-script-mode))
(add-to-list 'auto-mode-alist '(".gnus" . lisp-mode))
(add-to-list 'auto-mode-alist '("Dockerfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Vagrantfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . rhtml-mode))
(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+end_src

** Look and feel

Remove useless UI

#+begin_src emacs-lisp
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

Activate linum-mode for org-mode, markdown-mode and text-mode (stolen from the internetz)

#+begin_src emacs-lisp
(defun pl/linum-mode()
    (interactive)
    (linum-mode 1)
    (make-local-variable 'linum-format)
    (setq linum-format "  %d "))
(add-hook 'org-mode-hook 'pl/linum-mode)
(add-hook 'markdown-mode-hook 'pl/linum-mode)
(add-hook 'text-mode-hook 'pl/linum-mode)
#+end_src

Control frame transparency

#+begin_src emacs-lisp
(defun pl/transparency (value)
  "Sets the transparency of the frame window. 0 = transparent / 100 = opaque"
  (interactive "nTransparency Value 0 - 100 opaque: ")
  (set-frame-parameter (selected-frame) 'alpha value))
#+end_src

Enable X specific configs

#+begin_src emacs-lisp
(defun pl/x-mode()
  (interactive)
  ;; (global-hl-line-mode t)
  ;; (pl/transparency 85)
  ;; (global-linum-mode t)
  (load-theme 'darkmine t)
  (set-fringe-mode '(1 . 1))
  (when (member "Inconsolata-g" (font-family-list))
    (set-face-attribute 'default nil :font "Inconsolata-g-10")))

(if window-system (pl/x-mode))
#+end_src

Custom modeline

#+begin_src emacs-lisp
(which-func-mode)

(setq-default
 mode-line-format
 (list
  '(:eval (if (buffer-modified-p)
      (propertize "  %b" 'face 'bold-italic)
    (propertize "  %b" 'face 'bold)))
  " (%l:%c)"
  " %p/%I -"
  '(which-func-mode (" " which-func-format " -"))
  " %m";; (format " %s" minor-mode-alist)
))
#+end_src

** Functions

*** Shell

If shell has not been launched, launch it. If it was, simply switch to its buffer

#+begin_src emacs-lisp
(defun pl/get-shell()
  (interactive)
  (if (eq nil (get-buffer "*shell*"))
      (shell)
    (switch-to-buffer "*shell*")))
#+end_src

*** Tags

Find files through TAGs

#+begin_src emacs-lisp
(defun ido-find-file-in-tag-files ()
  (interactive)
  (save-excursion
    (let ((enable-recursive-minibuffers t))
      (visit-tags-table-buffer))
    (find-file
     (expand-file-name
      (ido-completing-read
       "Project file: " (tags-table-files) nil t)))))
#+end_src

*** Occur at point

Find occurrences of symbol at point

#+begin_src emacs-lisp
(defun pl/occur-at-point()
  (interactive)
  (setq thing (thing-at-point 'symbol))
  (unless thing
    (setq thing (read-from-minibuffer "Pattern: ")))
  (occur thing))
#+end_src

*** Go to documentation

To be continued and must add other documentation urls

#+begin_src emacs-lisp
(defun pl/go-to-doc()
  (interactive)

  (setq search-url "")
  (setq search-term (thing-at-point 'symbol))
  (setq current-major-mode (format "%s" major-mode))

  (unless search-term
    (setq search-term (read-from-minibuffer "Term to search in documentation: ")))

  (cond
   ;; Ruby
   ((equal current-major-mode "ruby-mode")
    (setq search-url "http://apidock.com/ruby/search?commit=Search&query="))
   ;; Python
   ((equal current-major-mode "python-mode")
    (setq search-url "https://docs.python.org/3/search.html?q="))
   ;; PHP
   ((equal current-major-mode "php-mode")
    (setq search-url "http://php.net/manual-lookup.php?pattern="))
   )

  (if (equal "" search-url)
      (error "Unknown search-url for major mode %s" current-major-mode)
    (browse-url (concat search-url search-term))))
#+end_src

*** PHP lint

Lint the current file (credits to Dimitri Fontaine)

#+begin_src emacs-lisp
(defun php-lint ()
  "Run php -l on the current buffer in a *Compile* buffer"
  (interactive)
  (compile (format "php -l %s" (buffer-file-name))))
#+end_src
