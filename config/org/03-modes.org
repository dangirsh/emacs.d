# Modes config file

* Org mode

** Set org files root
#+begin_src emacs-lisp
(setq org-files-root (format "%sorg/" user-emacs-directory))
(unless (file-accessible-directory-p org-files-root)
  (make-directory org-files-root))
#+end_src

** Set up agenda file

#+begin_src emacs-lisp
(setq org-agenda-files (list
                        (concat org-files-root "agenda.org")
                        ;; Add other files here ...
                        ))
#+end_src

** Capture configuration

#+begin_src emacs-lisp
(setq org-default-notes-file (format "%sorg/notes.org" user-emacs-directory))

(setq org-capture-templates
  '(
     ("t" "Todo" entry (file+headline (concat org-files-root "agenda.org") "Tasks")
        "* TODO %?\n  %U\n  %i\n  %a\n")
     ("j" "Journal" entry (file+datetree (concat org-files-root "notes.org"))
        "* %?\nEntered on %U\n  %i\n  %a\n")
     ("w" "Webplace" entry (file (concat org-files-root "webplaces.org"))
        "* %^L %^g\n")
   ))
#+end_src

** Strike done tasks

#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                             :weight normal
                             :strike-through t))))
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:foreground "Grey55" :strike-through t)))))
#+end_src

** Source code syntax highlighting

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

** Publish webplaces when saving webplaces.org file

#+begin_src emacs-lisp
 (defun pl/org-mode-publish-webplaces()
   (interactive)
   (message "Org mode publish webplaces hook")
   (when (string-match "webplaces\\.org" buffer-file-name)
     (condition-case nil
         (progn
           (let ((buffer-file-name-html (replace-regexp-in-string "\\.org$" ".html" buffer-file-name)))
             (org-export-as-html 3)
             (shell-command (format "scp -P 38170 %s pierre@qsdfgh.com:/home/www/www/" buffer-file-name-html))
             (delete-file buffer-file-name-html)))
       (error "Error while exporting and publishing webplaces.org"))))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (add-hook 'after-save-hook 'pl/org-mode-publish-webplaces nil 'make-it-local)))
;;

#+end_src

** Org publishing projects

#+begin_src emacs-lisp
;; Invoke with `org-publish'
(setq org-publish-project-alist '(
                                  ("webplaces-org"
                                   :with-author "Pierre Lecocq"
                                   :with-email "pierre.lecocq@gmail.com"
                                   :base-directory "~/.emacs.d/org/"
                                   :include ("webplaces.org")
                                   :exclude "agenda.org|notes.org"
                                   :exclude-tags ("noexport" "todo")
                                   :recursive nil
                                   :publishing-directory "/ssh:pierre@qsdfgh.com#38170:/home/www/www/"
                                   :publishing-function (org-html-publish-to-html)
                                   :html-extension "html"
                                   :base-extension "org"
                                   :language "en"
                                   :with-toc nil
                                   :section-numbers nil
                                   :html-doctype "html5"
                                   :html-head-include-default-style nil
                                   :html-head-include-scripts nil
                                   :html-head "<link href='/assets/default2.css' rel='stylesheet' type='text/css' />"
                                   :html-preamble "
<header>
<h1><a href=\"/\">Pierre L.<span></span></a></h1>
<ul class=\"nav\">
<li><a href=\"/\">Home</a></li>
<li><a href=\"about.html\">About</a></li>
</ul>
<ul class=\"contact\">
<li><a href=\"https://github.com/pierre-lecocq?tab=repositories\" class=\"github\" title=\"Github\" target=\"_blank\"></a></li>
<li><a href=\"https://twitter.com/pierre404\" class=\"twitter\" title=\"Twitter\" target=\"_blank\"></a></li>
<li><a href=\"http://fr.linkedin.com/in/pierrelecocqlinkedin\" class=\"linkedin\" title=\"Linkedin\" target=\"_blank\"></a></li>
<li><a href=\"mailto:pierre.lecocq@gmail.com?subject=Contact+from+qsdfgh.com\" class=\"email\" title=\"Email\" target=\"_blank\"></a></li>
</ul>
</header>
                                   "
                                   :html-postamble "
<footer>
<a href=\"/\">Home</a>
 | <a href=\"/about.html\">About</a>
 | <a href=\"/webplaces.html\">Bookmarks</a>
 | Generated with <a href=\"http://orgmode.org\">OrgMode</a> under <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/3.0/deed.en_US\">Creative Commons License</a>
 <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\"><input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"><input type=\"hidden\" name=\"hosted_button_id\" value=\"5DVQSZALUACTY\"><input type=\"image\" src=\"http://qsdfgh.com/assets/donate.png\" border=\"0\" name=\"submit\" alt=\"\"><img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/fr_FR/i/scr/pixel.gif\" width=\"1\" height=\"1\"></form>
</footer>
                                   "
                                   :htmlized-source t)
                                  ("qsdfgh-org"
                                   :with-author "Pierre Lecocq"
                                   :with-email "pierre.lecocq@gmail.com"
                                   :base-directory "~/.emacs.d/org/qsdfgh.com/"
                                   :publishing-directory "/ssh:pierre@qsdfgh.com#38170:/home/www/www/"
                                   :publishing-function (org-html-publish-to-html)
                                   :html-extension "html"
                                   :base-extension "org"
                                   :recursive t
                                   :language "en"
                                   :exclude-tags ("noexport" "todo")
                                   :section-numbers nil
                                   :with-toc nil
                                   :org-src-fontify-natively t
                                   :org-export-htmlize-output-type 'css
                                   :html-doctype "html5"
                                   :html-head-include-default-style nil
                                   :html-head-include-scripts nil
                                   :html-head "<link href='/assets/default2.css' rel='stylesheet' type='text/css' />"
                                   :html-preamble "
<header>
<h1><a href=\"/\">Pierre L.<span></span></a></h1>
<ul class=\"nav\">
<li><a href=\"/\">Home</a></li>
<li><a href=\"about.html\">About</a></li>
</ul>
<ul class=\"contact\">
<li><a href=\"https://github.com/pierre-lecocq?tab=repositories\" class=\"github\" title=\"Github\" target=\"_blank\"></a></li>
<li><a href=\"https://twitter.com/pierre404\" class=\"twitter\" title=\"Twitter\" target=\"_blank\"></a></li>
<li><a href=\"http://fr.linkedin.com/in/pierrelecocqlinkedin\" class=\"linkedin\" title=\"Linkedin\" target=\"_blank\"></a></li>
<li><a href=\"mailto:pierre.lecocq@gmail.com?subject=Contact+from+qsdfgh.com\" class=\"email\" title=\"Email\" target=\"_blank\"></a></li>
</ul>
</header>
                                   "
                                   :html-postamble "
<footer>
<a href=\"/\">Home</a>
 | <a href=\"/about.html\">About</a>
 | <a href=\"/webplaces.html\">Bookmarks</a>
 | Generated with <a href=\"http://orgmode.org\">OrgMode</a> under <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-sa/3.0/deed.en_US\">Creative Commons License</a>
 <form action=\"https://www.paypal.com/cgi-bin/webscr\" method=\"post\" target=\"_top\"><input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"><input type=\"hidden\" name=\"hosted_button_id\" value=\"5DVQSZALUACTY\"><input type=\"image\" src=\"http://qsdfgh.com/assets/donate.png\" border=\"0\" name=\"submit\" alt=\"\"><img alt=\"\" border=\"0\" src=\"https://www.paypalobjects.com/fr_FR/i/scr/pixel.gif\" width=\"1\" height=\"1\"></form>
</footer>
                                   "
                                   :htmlized-source t)
                                  ("qsdfgh-assets"
                                   :base-directory "~/.emacs.d/org/qsdfgh.com/assets/"
                                   :publishing-directory "/ssh:pierre@qsdfgh.com#38170:/home/www/www/assets/"
                                   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
                                   :recursive t
                                   :publishing-function org-publish-attachment)

                                  ("qsdfgh" :components ("qsdfgh-org" "qsdfgh-assets"))
                                  ("webplaces" :components ("webplaces-org" "qsdfgh-assets"))
                                  ))
#+end_src

* Ido mode

** General mode

#+begin_src emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)
#+end_src

** Vertical mode

#+begin_src emacs-lisp
(require 'ido-vertical-mode)
(ido-vertical-mode)
#+end_src

** Hacks

#+begin_src emacs-lisp
(require 'ido-hacks)
(ido-hacks-mode)
#+end_src

* Autopair mode

#+begin_src emacs-lisp
(autopair-global-mode t)
#+end_src

* Auto-complete-mode

#+begin_src emacs-lisp
;; (require 'auto-complete)
;; (global-auto-complete-mode t)
;; (require 'auto-complete-config)
;; (ac-config-default)
;; (setq-default ac-sources
;;               '(
;;                 ac-source-abbrev
;;                 ac-source-dictionary
;;                 ac-source-filename
;;                 ac-source-files-in-current-dir
;;                 ac-source-functions
;;                 ac-source-variables
;;                 ac-source-symbols
;;                 ac-source-features
;;                 ac-source-words-in-all-buffer
;;                 ac-source-words-in-same-mode-buffers))
#+end_src

* Company-mode

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(setq company-auto-complete nil)
(global-company-mode 1)
(add-to-list 'company-backends 'company-dabbrev t)
(add-to-list 'company-backends 'company-ispell t)
(add-to-list 'company-backends 'company-files t)
#+end_src

* Recentf mode

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
#+end_src

* Rainbow mode

Only when CSS file is loaded

#+begin_src emacs-lisp
(add-hook 'css-mode-hook
          (lambda () (rainbow-mode 1)))
#+end_src

* Flycheck mode

#+begin_src emacs-lisp
(require 'flycheck)
#+end_src

* Uniquify

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward uniquify-separator "/")
#+end_src

* Idle Highlight mode

Highlight a word-at-point after a delay

#+begin_src emacs-lisp
(defun my-coding-hook ()
  (idle-highlight-mode t))

(add-hook 'emacs-lisp-mode-hook 'my-coding-hook)
(add-hook 'ruby-mode-hook 'my-coding-hook)
(add-hook 'js2-mode-hook 'my-coding-hook)
(add-hook 'php-mode-hook 'my-coding-hook)
#+end_src

* ElFeed

Setup feeds

#+begin_src emacs-lisp
(setq elfeed-feeds
      '(("http://planet.emacsen.org/atom.xml" emacs)
        ("http://emacsredux.com/atom.xml" emacs dev blog)
        ("http://nullprogram.com/feed/" emacs blog)
        ("http://www.masteringemacs.org/feed/" emacs dev blog)
        ("http://sachachua.com/blog/feed/" emacs blog)
        ("http://batsov.com/atom.xml" ruby emacs dev blog)
        ("http://www.securityfocus.com/rss/vulnerabilities.xml" security)
        ("http://planet.debian.org/rss20.xml" system linux debian)
        ("http://www.reddit.com/r/debian.rss" system linux debian)
        ("http://www.reddit.com/r/emacs.rss" emacs)
        ("http://www.reddit.com/r/netsec.rss" security)
        ("https://www.schneier.com/blog/atom.xml" security blog)
        ("http://www.reddit.com/r/linux.rss" system linux)
        ("http://www.reddit.com/r/ruby.rss" ruby dev)
        ("https://www.ruby-lang.org/en/feeds/news.rss" ruby dev)
        ("http://devblog.avdi.org/feed/" ruby dev blog)
        ("http://feeds.feedburner.com/codinghorror?format=xml" dev blog)
        "http://xkcd.com/rss.xml"))
#+end_src

* Emms

Emms configuration that I use only for listening to streams (via =emms-streams=) or single file (via =emms-play-file=)

#+begin_src emacs-lisp
(require 'emms-setup)
(emms-standard)
(emms-default-players)

(setq emms-info-asynchronously nil)
(setq emms-playlist-buffer-name "*Music*")
(setq emms-stream-bookmarks-file "~/.emacs.d/emms-streams")

;; Add flv and ogv
(define-emms-simple-player mplayer '(file url)
      (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")
#+end_src

* ERC

#+begin_src emacs-lisp
(defun pl/erc-connect ()
  (interactive)

  (setq erc-nick "pierreL")
  (setq erc-log-insert-log-on-open nil)
  (setq erc-log-channels t)
  (setq erc-log-channels-directory "~/.irclogs/")
  (setq erc-save-buffer-on-part t)
  (setq erc-hide-timestamps nil)
  (erc-netsplit-mode 1)
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
  (setq erc-max-buffer-size 20000)
  (defvar erc-insert-post-hook)
  (add-hook 'erc-insert-post-hook 'erc-truncate-buffer)
  (setq erc-truncate-buffer-on-save t)
  (setq erc-keywords '("pierreL"))
  (erc-match-mode 1)
  (setq erc-timestamp-only-if-changed-flag nil)
  (setq erc-timestamp-format "[%R] ")
  (setq erc-insert-timestamp-function 'erc-insert-timestamp-left)
  (setq erc-server-coding-system '(utf-8 . utf-8))
  (setq erc-interpret-mirc-color t)
  (setq erc-kill-buffer-on-part t)
  (setq erc-kill-queries-on-quit t)
  (setq erc-kill-server-buffer-on-quit t)
  (add-hook 'erc-mode-hook (lambda () (auto-fill-mode 0)))
  ;;(erc-scrolltobottom-enable)

  (add-hook 'erc-after-connect
            '(lambda (SERVER NICK)
               (erc-message "PRIVMSG" (format "NickServ identify %s" (read-passwd "IRC Password: ")))))

  (erc :server "irc.freenode.net" :port 6666 :nick "pierreL" :full-name "Pierre")
  ;; (setq erc-autojoin-channels-alist '(("freenode.net" "#debian" "#emacs"))))
  (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs"))))
#+end_src

* Twitter

#+begin_src emacs-lisp
(setq
 twittering-use-master-password t
 twittering-icon-mode t
)
#+end_src

* Common lisp

#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src
