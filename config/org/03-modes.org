# Modes config file

* Ido mode

** General mode

#+begin_src emacs-lisp
(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)
#+end_src

** Vertical mode

#+begin_src emacs-lisp
(require 'ido-vertical-mode)
(ido-vertical-mode)
#+end_src

** Hacks

#+begin_src emacs-lisp
(require 'ido-hacks)
(ido-hacks-mode)
#+end_src

* Autopair mode

#+begin_src emacs-lisp
(autopair-global-mode t)
#+end_src

* Auto-complete-mode

#+begin_src emacs-lisp
;; (require 'auto-complete)
;; (global-auto-complete-mode t)
;; (require 'auto-complete-config)
;; (ac-config-default)
;; (setq-default ac-sources
;;               '(
;;                 ac-source-abbrev
;;                 ac-source-dictionary
;;                 ac-source-filename
;;                 ac-source-files-in-current-dir
;;                 ac-source-functions
;;                 ac-source-variables
;;                 ac-source-symbols
;;                 ac-source-features
;;                 ac-source-words-in-all-buffer
;;                 ac-source-words-in-same-mode-buffers))
#+end_src

* Company-mode

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'global-company-mode)
(setq company-auto-complete nil)
(global-company-mode 1)
(add-to-list 'company-backends 'company-dabbrev t)
(add-to-list 'company-backends 'company-ispell t)
(add-to-list 'company-backends 'company-files t)
#+end_src

* Recentf mode

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-items 25)
#+end_src

* Rainbow mode

Only when CSS file is loaded

#+begin_src emacs-lisp
(add-hook 'css-mode-hook
          (lambda () (rainbow-mode 1)))
#+end_src

* Flycheck mode

#+begin_src emacs-lisp
(require 'flycheck)
#+end_src

* Uniquify

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward uniquify-separator "/")
#+end_src

* Idle Highlight mode

Highlight a word-at-point after a delay

#+begin_src emacs-lisp
(defun my-coding-hook ()
  (idle-highlight-mode t))

(add-hook 'emacs-lisp-mode-hook 'my-coding-hook)
(add-hook 'ruby-mode-hook 'my-coding-hook)
(add-hook 'js2-mode-hook 'my-coding-hook)
(add-hook 'php-mode-hook 'my-coding-hook)
#+end_src

* ElFeed

Setup feeds

#+begin_src emacs-lisp
(setq elfeed-feeds
      '(("http://planet.emacsen.org/atom.xml" emacs)
        ("http://emacsredux.com/atom.xml" emacs dev blog)
        ("http://nullprogram.com/feed/" emacs blog)
        ("http://www.masteringemacs.org/feed/" emacs dev blog)
        ("http://sachachua.com/blog/feed/" emacs blog)
        ("http://batsov.com/atom.xml" ruby emacs dev blog)
        ("http://www.securityfocus.com/rss/vulnerabilities.xml" security)
        ("http://planet.debian.org/rss20.xml" system linux debian)
        ("http://www.reddit.com/r/debian.rss" system linux debian)
        ("http://www.reddit.com/r/emacs.rss" emacs)
        ("http://www.reddit.com/r/netsec.rss" security)
        ("https://www.schneier.com/blog/atom.xml" security blog)
        ("http://www.reddit.com/r/linux.rss" system linux)
        ("http://www.reddit.com/r/ruby.rss" ruby dev)
        ("https://www.ruby-lang.org/en/feeds/news.rss" ruby dev)
        ("http://devblog.avdi.org/feed/" ruby dev blog)
        ("http://feeds.feedburner.com/codinghorror?format=xml" dev blog)
        "http://xkcd.com/rss.xml"))
#+end_src

* Emms

Emms configuration that I use only for listening to streams (via =emms-streams=) or single file (via =emms-play-file=)

#+begin_src emacs-lisp
(require 'emms-setup)
(emms-standard)
(emms-default-players)

(setq
  emms-info-asynchronously nil
  emms-playlist-buffer-name "*Music*"
  emms-source-file-default-directory "~/music/"
  emms-stream-bookmarks-file "~/.emacs.d/emms-streams")

(define-emms-simple-player mplayer '(file url)
      (regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
                    ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" "http://" "mms://"
                    ".rm" ".rmvb" ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"))
      "mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")

(defun pl/emms-track-description(track)
  (let ((tracknumber (emms-track-get track 'info-tracknumber))
        (playtime (emms-track-get track 'info-playing-time))
        (artist (emms-track-get track 'info-artist))
        (album (emms-track-get track 'info-album))
        (title (emms-track-get track 'info-title)))
    (if (eq nil title)
        (emms-track-simple-description track)
      (format " %02d | %s (%s) - %s - %02d"
              (if (> (length tracknumber) 0) (string-to-number tracknumber) 0)
              (if (> (length artist) 0) artist "Unknown artist")
              (if (> (length album) 0) album "Unknown album")
              (if (> (length title) 0) title "Unknown title")
              (if (> (length playtime) 0) (string-to-number playtime) 0)))
    ))

(setq emms-track-description-function 'pl/emms-track-description)

(defun pl/emms-toggle()
  (interactive)
  (if (eq nil (get-buffer "*Music*"))
        (call-interactively 'emms-play-directory)
    (emms-pause)))

(global-set-key (kbd "<XF86AudioPlay>") 'pl/emms-toggle)
#+end_src

* ERC

#+begin_src emacs-lisp
(defun pl/erc-connect ()
  (interactive)

  (setq erc-nick "pierreL")
  (setq erc-log-insert-log-on-open nil)
  (setq erc-log-channels t)
  (setq erc-log-channels-directory "~/.irclogs/")
  (setq erc-save-buffer-on-part t)
  (setq erc-hide-timestamps nil)
  (erc-netsplit-mode 1)
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
  (setq erc-max-buffer-size 20000)
  (defvar erc-insert-post-hook)
  (add-hook 'erc-insert-post-hook 'erc-truncate-buffer)
  (setq erc-truncate-buffer-on-save t)
  (setq erc-keywords '("pierreL"))
  (erc-match-mode 1)
  (setq erc-timestamp-only-if-changed-flag nil)
  (setq erc-timestamp-format "[%R] ")
  (setq erc-insert-timestamp-function 'erc-insert-timestamp-left)
  (setq erc-server-coding-system '(utf-8 . utf-8))
  (setq erc-interpret-mirc-color t)
  (setq erc-kill-buffer-on-part t)
  (setq erc-kill-queries-on-quit t)
  (setq erc-kill-server-buffer-on-quit t)
  (add-hook 'erc-mode-hook (lambda () (auto-fill-mode 0)))
  ;;(erc-scrolltobottom-enable)

  (add-hook 'erc-after-connect
            '(lambda (SERVER NICK)
               (erc-message "PRIVMSG" (format "NickServ identify %s" (read-passwd "IRC Password: ")))))

  (erc :server "irc.freenode.net" :port 6666 :nick "pierreL" :full-name "Pierre")
  ;; (setq erc-autojoin-channels-alist '(("freenode.net" "#debian" "#emacs"))))
  (setq erc-autojoin-channels-alist '(("freenode.net" "#emacs"))))
#+end_src

* Twitter

#+begin_src emacs-lisp
(setq
 twittering-use-master-password t
 twittering-icon-mode t
)
#+end_src

* Common lisp

#+begin_src emacs-lisp
(setq inferior-lisp-program "sbcl")
#+end_src
